var i=class{$self;$source;$method(t,...e){return this.$source[t](...e),this.$self}$set(t,e){if(typeof t=="string"&&/\./.test(t)||Array.isArray(t)){let s=this.$source;(typeof t=="string"?t.split("."):t).forEach((r,n,u)=>{n==u.length-1?s[r]=e:(s[r]||(s[r]={}),s=s[r])})}else if(typeof t=="string")this.$source[t]=e;else if(typeof t=="object")Object.assign(this.$source,t);else throw new Error("$set needs string/object");return this.$self}$value(){return this.$source}$proxy(){let t=this;return new Proxy(t,{get(e,s){return typeof s=="string"&&s.startsWith("$")?t[s]:s in t.$source&&typeof t.$source[s]=="function"?t.$method.bind(t,s):typeof s=="string"&&`$${s}`in t?t[`$${s}`]:null}})}$tap(t){return t(this),this.$self}$thru(t){return this.$source=t(this),this.$self}constructor(t){this.$source=t}};function o($){let t=new i($).$proxy();return t.$self=t}export{i as Chainable,o as default};
