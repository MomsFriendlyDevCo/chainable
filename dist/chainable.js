var u=class{$self;$source;$call(t,...s){let[e,r]=(Array.isArray(t)?t:t.split(".")).reduce((i,n)=>i?[i[1],i[1][n]]:void 0,[this.$source,this.$source]);return r.call(e,...s),this.$self}$get(t){return(Array.isArray(t)?t:t.split(".")).reduce((s,e)=>s?s[e]:void 0,this.$source)}$set(t,s){if(typeof t=="string"||Array.isArray(t)){let e=this.$source;(typeof t=="string"?t.split("."):t).forEach((r,i,n)=>{i==n.length-1?e[r]=s:(e[r]||(e[r]={}),e=e[r])})}else if(typeof t=="object")Object.assign(this.$source,t);else throw new Error("$set needs string/object");return this.$self}$value(){return this.$source}$proxy(){let t=this;return new Proxy(t,{get(s,e){return typeof e=="string"&&e.startsWith("$")?t[e]:e in t.$source&&typeof t.$source[e]=="function"?t.$call.bind(t,e):typeof e=="string"&&`$${e}`in t?t[`$${e}`]:null}})}$tap(t){return t(this),this.$self}$thru(t){return this.$source=t(this),this.$self}constructor(t){this.$source=t}};function c($){let t=new u($).$proxy();return t.$self=t}export{u as Chainable,c as default};
